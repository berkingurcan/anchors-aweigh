{
    "id": "2",
    "title": "Introduction to Rust Programming",
    "description": "Learn the basics of Rust programming and build your own applications using this powerful language.",
    "introduction_paragraph": "Rust is a modern programming language that is designed for safety, speed, and concurrency. In this course, you will learn the basics of the language and build your own applications using Rust. By the end of the course, you will have a solid understanding of Rust programming and be able to use it to create your own projects.",
    "chapters": [
      {
        "id": "1",
        "title": "Getting Started with Rust",
        "task_description": "In this chapter, you will learn how to set up a Rust development environment and write your first program.",
        "instructions": [
          {
            "text": "To get started with Rust, you will need to install the Rust programming language on your computer. You can download the installer from the official Rust website: https://www.rust-lang.org/",
            "code_block": null
          },
          {
            "text": "Once you have installed Rust, you can use the `cargo` command to create a new project. Run the following command to create a new project called `my_project`:",
            "code_block": "cargo new my_project --bin"
          }
        ],
        "initial_code": "fn main() {\n    println!(\"Hello, world!\");\n}",
        "answer_code": "fn main() {\n    println!(\"Hello, world!\");\n}"
      },
      {
        "id": "2",
        "title": "Data Types and Variables",
        "task_description": "In this chapter, you will learn about the different data types in Rust and how to declare and use variables.",
        "instructions": [
          {
            "text": "Rust has a number of built-in data types, including integers, floating-point numbers, and strings. You can declare a variable using the `let` keyword, like this:",
            "code_block": "let x = 5;\nlet y = 10.5;\nlet s = \"Hello, Rust!\";"
          },
          {
            "text": "You can also specify the data type of a variable when you declare it, like this:",
            "code_block": "let x: i32 = 5;\nlet y: f32 = 10.5;\nlet s: &str = \"Hello, Rust!\";"
          }
        ],
        "initial_code": "",
        "answer_code": "let x = 5;\nlet y = 10.5;\nlet s = \"Hello, Rust!\";\nprintln!(\"x = {}\", x);\nprintln!(\"y = {}\", y);\nprintln!(\"s = {}\", s);"
      },
      {
        "id": "3",
        "title": "Control Flow",
        "task_description": "In this chapter, you will learn about the different control flow statements in Rust, including if/else, while, and for loops.",
        "instructions": [
          {
            "text": "Rust supports the standard if/else control flow statement, which allows you to execute different code based on the result of a condition. Here is an example:",
            "code_block": "let x = 5;\nif x > 10 {\n    println!(\"x is greater than 10\");\n} else {\n    println!(\"x is not greater than 10\");\n}"
          },
          {
            "text": "Rust also supports while loops, which will execute code repeatedly until a certain condition is met. Here is an example:",
            "code_block": "let mut x = 5;\nwhile x > 0 {\n    println!(\"x = {}\", x);\n    x -= 1;\n}"
          },
          {
            "text": "Rust also supports for loops, which can be used to iterate through collections or a range of numbers. Here is an example:",
            "code_block": "for i in 0..5 {\n    println!(\"i = {}\", i);\n}"
          }
        ],
        "initial_code": "",
        "answer_code": "let x = 5;\nif x > 10 {\n    println!(\"x is greater than 10\");\n} else {\n    println!(\"x is not greater than 10\");\n}\nlet mut x = 5;\nwhile x > 0 {\n    println!(\"x = {}\", x);\n    x -= 1;\n}\nfor i in 0..5 {\n    println!(\"i = {}\", i);\n}"
      },
      {
        "id": "4",
        "title": "Functions and Modules",
        "task_description": "In this chapter, you will learn how to define and call functions in Rust and how to organize code using modules.",
        "instructions": [
          {
            "text": "Rust supports the standard function declaration syntax, using the `fn` keyword. Here is an example:",
            "code_block": "fn add(x: i32, y: i32) -> i32 {\n    x + y\n}\nlet result = add(5, 10);\nprintln!(\"result = {}\", result);"
          },
          {
            "text": "Rust also supports the use of modules, which allow you to organize your code into different groups. Here is an example:",
            "code_block": "mod my_module {\n    fn add(x: i32, y: i32) -> i32 {\n        x + y\n    }\n}\nlet result = my_module::add(5, 10);\nprintln!(\"result = {}\", result);"
          }
        ],
        "initial_code": "",
        "answer_code": "fn add(x: i32, y: i32) -> i32 {\n    x + y\n}\nlet result =x"
        }   
    ]
  }
  